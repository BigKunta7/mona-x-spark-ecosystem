{
  "name": "mona-spark-v2",
  "version": "2.0.0",
  "description": "Écosystème complet MONA x SPARK V2 - Gestion d'artistes et villas créatives",
  "main": "index.js",
  "scripts": {
    "dev": "concurrently \"npm run dev:api\" \"npm run dev:client\"",
    "dev:api": "cd app/api && npm run dev",
    "dev:client": "cd app/client && npm run dev",
    "build": "npm run build:api && npm run build:client",
    "build:api": "cd app/api && npm run build",
    "build:client": "cd app/client && npm run build",
    "start": "docker-compose up -d",
    "stop": "docker-compose down",
    "restart": "npm run stop && npm run start",
    "logs": "docker-compose logs -f",
    "logs:api": "docker-compose logs -f api",
    "logs:client": "docker-compose logs -f client",
    "logs:db": "docker-compose logs -f postgres",
    "logs:redis": "docker-compose logs -f redis",
    "test": "npm run test:api && npm run test:client",
    "test:api": "cd app/api && npm test",
    "test:client": "cd app/client && npm test",
    "test:e2e": "npm run test:e2e:api && npm run test:e2e:client",
    "test:e2e:api": "cd app/api && npm run test:e2e",
    "test:e2e:client": "cd app/client && npm run test:e2e",
    "test:coverage": "npm run test:coverage:api && npm run test:coverage:client",
    "test:coverage:api": "cd app/api && npm run test:coverage",
    "test:coverage:client": "cd app/client && npm run test:coverage",
    "lint": "npm run lint:api && npm run lint:client",
    "lint:api": "cd app/api && npm run lint",
    "lint:client": "cd app/client && npm run lint",
    "lint:fix": "npm run lint:fix:api && npm run lint:fix:client",
    "lint:fix:api": "cd app/api && npm run lint:fix",
    "lint:fix:client": "cd app/client && npm run lint:fix",
    "type-check": "npm run type-check:api && npm run type-check:client",
    "type-check:api": "cd app/api && npm run type-check",
    "type-check:client": "cd app/client && npm run type-check",
    "db:migrate": "cd app/api && npx prisma migrate deploy",
    "db:migrate:dev": "cd app/api && npx prisma migrate dev",
    "db:generate": "cd app/api && npx prisma generate",
    "db:seed": "cd app/api && npx prisma db seed",
    "db:reset": "cd app/api && npx prisma migrate reset",
    "db:studio": "cd app/api && npx prisma studio",
    "db:backup": "docker-compose exec -T postgres pg_dump -U postgres mona_spark > backup_$(date +%Y%m%d_%H%M%S).sql",
    "db:restore": "docker-compose exec -T postgres psql -U postgres mona_spark < $1",
    "docker:build": "docker-compose build",
    "docker:build:no-cache": "docker-compose build --no-cache",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:restart": "docker-compose restart",
    "docker:logs": "docker-compose logs -f",
    "docker:clean": "docker system prune -f",
    "docker:clean:all": "docker system prune -a -f",
    "deploy:staging": "chmod +x scripts/deploy.sh && ./scripts/deploy.sh staging",
    "deploy:production": "chmod +x scripts/deploy.sh && ./scripts/deploy.sh production",
    "deploy:rollback": "docker-compose down && docker tag mona-spark-api:$1 mona-spark-api:latest && docker tag mona-spark-client:$1 mona-spark-client:latest && docker-compose up -d",
    "monitoring:logs": "tail -f logs/combined.log",
    "monitoring:logs:error": "tail -f logs/error.log",
    "monitoring:logs:audit": "tail -f logs/audit.log",
    "monitoring:logs:performance": "tail -f logs/performance.log",
    "monitoring:logs:security": "tail -f logs/security.log",
    "monitoring:health": "curl -f http://localhost:3001/health && curl -f http://localhost:3000",
    "monitoring:metrics": "curl http://localhost:3001/metrics",
    "monitoring:status": "docker-compose ps",
    "monitoring:resources": "docker stats --no-stream",
    "logs:cleanup": "find logs/ -name '*.log' -mtime +30 -delete",
    "logs:rotate": "logrotate -f logrotate.conf",
    "backup:create": "npm run db:backup && tar -czf logs_backup_$(date +%Y%m%d_%H%M%S).tar.gz logs/",
    "backup:list": "ls -la backup_*.sql logs_backup_*.tar.gz 2>/dev/null || echo 'Aucun backup trouvé'",
    "backup:cleanup": "find . -name 'backup_*.sql' -mtime +7 -delete && find . -name 'logs_backup_*.tar.gz' -mtime +7 -delete",
    "security:audit": "npm audit",
    "security:audit:fix": "npm audit fix",
    "security:scan": "npm run security:scan:api && npm run security:scan:client",
    "security:scan:api": "cd app/api && npm audit",
    "security:scan:client": "cd app/client && npm audit",
    "performance:lighthouse": "lighthouse http://localhost:3000 --output html --output-path ./lighthouse-report.html",
    "performance:load-test": "artillery run load-tests/load-test.yml",
    "performance:stress-test": "artillery run load-tests/stress-test.yml",
    "docs:generate": "npm run docs:generate:api && npm run docs:generate:client",
    "docs:generate:api": "cd app/api && npm run docs:generate",
    "docs:generate:client": "cd app/client && npm run docs:generate",
    "docs:serve": "cd docs && python -m http.server 8000",
    "install:all": "npm install && cd app/api && npm install && cd ../client && npm install",
    "install:dev": "npm install && cd app/api && npm install && cd ../client && npm install",
    "install:prod": "npm ci --only=production && cd app/api && npm ci --only=production && cd ../client && npm ci --only=production",
    "setup:env": "cp env.example .env && echo 'Veuillez éditer le fichier .env avec vos configurations'",
    "setup:db": "npm run db:migrate && npm run db:seed",
    "setup:docker": "docker-compose up -d postgres redis",
    "setup:full": "npm run setup:env && npm run setup:docker && npm run setup:db && npm run install:dev",
    "clean": "npm run clean:node_modules && npm run clean:logs && npm run clean:build",
    "clean:node_modules": "rm -rf node_modules && cd app/api && rm -rf node_modules && cd ../client && rm -rf node_modules",
    "clean:logs": "rm -rf logs/*.log",
    "clean:build": "rm -rf app/api/dist app/client/.next app/client/out",
    "update:deps": "npm update && cd app/api && npm update && cd ../client && npm update",
    "update:all": "npm run update:deps && npm run install:all",
    "version:patch": "npm version patch",
    "version:minor": "npm version minor",
    "version:major": "npm version major",
    "release:staging": "npm run version:patch && git push origin develop",
    "release:production": "npm run version:minor && git push origin main",
    "help": "echo 'Scripts disponibles:' && npm run | grep -E '^  [a-z]' | sort"
  },
  "keywords": [
    "mona",
    "spark",
    "artists",
    "management",
    "creative",
    "villas",
    "streaming",
    "automation",
    "marketplace",
    "crm",
    "dashboard"
  ],
  "author": "MONA x SPARK Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/mona-spark-v2.git"
  },
  "bugs": {
    "url": "https://github.com/your-org/mona-spark-v2/issues"
  },
  "homepage": "https://mona-spark.com",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "rimraf": "^5.0.5"
  },
  "dependencies": {},
  "workspaces": [
    "app/api",
    "app/client",
    "shared"
  ]
} 