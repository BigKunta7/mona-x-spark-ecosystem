#!/bin/bash

# MONA x SPARK - Script de V√©rification Architecture Nettoy√©e
# Analyse compl√®te pour s'assurer qu'il n'y a pas de donn√©es factices

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${PURPLE}üîç V√©rification Architecture MONA x SPARK${NC}"
echo -e "${CYAN}Analyse compl√®te pour s'assurer qu'il n'y a pas de donn√©es factices${NC}"
echo ""

# Fonction pour v√©rifier la structure
check_structure() {
    echo -e "${BLUE}üìÅ V√©rification de la structure...${NC}"
    
    # V√©rifier que l'ancienne structure a √©t√© supprim√©e
    if [ -d "mona-engine" ] || [ -d "spark-hub" ] || [ -d "business-intelligence" ]; then
        echo -e "${RED}‚ùå Ancienne structure d√©tect√©e${NC}"
        echo "   Supprimez les dossiers : mona-engine, spark-hub, business-intelligence"
        return 1
    else
        echo -e "${GREEN}‚úÖ Ancienne structure supprim√©e${NC}"
    fi
    
    # V√©rifier la nouvelle structure
    if [ -d "app" ] && [ -d "services" ] && [ -d "shared" ]; then
        echo -e "${GREEN}‚úÖ Nouvelle structure tout-en-un pr√©sente${NC}"
    else
        echo -e "${RED}‚ùå Structure tout-en-un incompl√®te${NC}"
        return 1
    fi
    
    # V√©rifier les sous-dossiers
    if [ -d "app/client" ] && [ -d "app/api" ] && [ -d "app/db" ]; then
        echo -e "${GREEN}‚úÖ Structure app compl√®te${NC}"
    else
        echo -e "${RED}‚ùå Structure app incompl√®te${NC}"
        return 1
    fi
    
    if [ -d "services/analytics" ] && [ -d "services/media-processor" ] && [ -d "services/notifications" ] && [ -d "services/streaming-bridge" ]; then
        echo -e "${GREEN}‚úÖ Structure services compl√®te${NC}"
    else
        echo -e "${RED}‚ùå Structure services incompl√®te${NC}"
        return 1
    fi
    
    echo ""
}

# Fonction pour v√©rifier les fichiers de configuration
check_config_files() {
    echo -e "${BLUE}‚öôÔ∏è  V√©rification des fichiers de configuration...${NC}"
    
    # V√©rifier package.json
    if [ -f "package.json" ]; then
        echo -e "${GREEN}‚úÖ package.json principal pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå package.json principal manquant${NC}"
        return 1
    fi
    
    # V√©rifier docker-compose.yml
    if [ -f "docker-compose.yml" ]; then
        echo -e "${GREEN}‚úÖ docker-compose.yml pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå docker-compose.yml manquant${NC}"
        return 1
    fi
    
    # V√©rifier le sch√©ma de base de donn√©es
    if [ -f "app/db/schema.sql" ]; then
        echo -e "${GREEN}‚úÖ Sch√©ma de base de donn√©es pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå Sch√©ma de base de donn√©es manquant${NC}"
        return 1
    fi
    
    # V√©rifier les scripts de d√©marrage
    if [ -f "start-tout-en-un.sh" ]; then
        echo -e "${GREEN}‚úÖ Script de d√©marrage tout-en-un pr√©sent${NC}"
    else
        echo -e "${RED}‚ùå Script de d√©marrage tout-en-un manquant${NC}"
        return 1
    fi
    
    echo ""
}

# Fonction pour v√©rifier les donn√©es factices
check_fake_data() {
    echo -e "${BLUE}üîç Recherche de donn√©es factices...${NC}"
    
    # V√©rifier les emails factices (non comment√©s)
    if grep -r "^[[:space:]]*('admin@monaspark.com\|'manager@monaspark.com\|'test@\|'demo@\|'example@" . --exclude-dir=node_modules --exclude=package-lock.json --exclude=verify-clean-architecture.sh 2>/dev/null; then
        echo -e "${RED}‚ùå Donn√©es factices d√©tect√©es dans les fichiers${NC}"
        return 1
    else
        echo -e "${GREEN}‚úÖ Aucune donn√©e factice d√©tect√©e${NC}"
    fi
    
    # V√©rifier les mots de passe factices (non comment√©s)
    if grep -r "^[[:space:]]*('.*default_hash\|.*password123\|.*admin123" . --exclude-dir=node_modules --exclude=package-lock.json --exclude=verify-clean-architecture.sh 2>/dev/null; then
        echo -e "${RED}‚ùå Mots de passe factices d√©tect√©s${NC}"
        return 1
    else
        echo -e "${GREEN}‚úÖ Aucun mot de passe factice d√©tect√©${NC}"
    fi
    
    # V√©rifier les IDs factices
    if grep -r "your_twitch_client_id\|your_spotify_client_id\|your_jwt_secret" . --exclude-dir=node_modules --exclude=package-lock.json 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Variables d'environnement d'exemple d√©tect√©es (normal)${NC}"
    else
        echo -e "${GREEN}‚úÖ Variables d'environnement propres${NC}"
    fi
    
    echo ""
}

# Fonction pour v√©rifier les fichiers inutiles
check_unnecessary_files() {
    echo -e "${BLUE}üßπ V√©rification des fichiers inutiles...${NC}"
    
    # V√©rifier les node_modules
    if find . -name "node_modules" -type d 2>/dev/null | grep -q .; then
        echo -e "${YELLOW}‚ö†Ô∏è  Dossiers node_modules d√©tect√©s (√† nettoyer)${NC}"
        find . -name "node_modules" -type d 2>/dev/null
    else
        echo -e "${GREEN}‚úÖ Aucun dossier node_modules${NC}"
    fi
    
    # V√©rifier les fichiers de cache
    if find . -name "*.cache" -o -name "*.tmp" -o -name "*.log" 2>/dev/null | grep -q .; then
        echo -e "${YELLOW}‚ö†Ô∏è  Fichiers de cache d√©tect√©s (√† nettoyer)${NC}"
        find . -name "*.cache" -o -name "*.tmp" -o -name "*.log" 2>/dev/null
    else
        echo -e "${GREEN}‚úÖ Aucun fichier de cache${NC}"
    fi
    
    # V√©rifier les fichiers de build
    if find . -name "dist" -o -name "build" -o -name ".next" 2>/dev/null | grep -q .; then
        echo -e "${YELLOW}‚ö†Ô∏è  Dossiers de build d√©tect√©s (√† nettoyer)${NC}"
        find . -name "dist" -o -name "build" -o -name ".next" 2>/dev/null
    else
        echo -e "${GREEN}‚úÖ Aucun dossier de build${NC}"
    fi
    
    echo ""
}

# Fonction pour v√©rifier la coh√©rence des URLs
check_url_consistency() {
    echo -e "${BLUE}üåê V√©rification de la coh√©rence des URLs...${NC}"
    
    # V√©rifier les URLs dans docker-compose.yml
    if grep -q "localhost:3000\|localhost:3001\|localhost:3002" docker-compose.yml; then
        echo -e "${GREEN}‚úÖ URLs coh√©rentes dans docker-compose.yml${NC}"
    else
        echo -e "${RED}‚ùå URLs incoh√©rentes dans docker-compose.yml${NC}"
        return 1
    fi
    
    # V√©rifier les URLs dans les fichiers de configuration
    if grep -r "localhost:3000\|localhost:3001\|localhost:3002" . --exclude-dir=node_modules --exclude=package-lock.json 2>/dev/null | grep -q .; then
        echo -e "${GREEN}‚úÖ URLs coh√©rentes dans les configurations${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  URLs non trouv√©es dans les configurations${NC}"
    fi
    
    echo ""
}

# Fonction pour v√©rifier la documentation
check_documentation() {
    echo -e "${BLUE}üìö V√©rification de la documentation...${NC}"
    
    # V√©rifier les fichiers de documentation
    if [ -f "README.md" ] && [ -f "architecture-tout-en-un.md" ] && [ -f "TRANSITION-TOUT-EN-UN.md" ]; then
        echo -e "${GREEN}‚úÖ Documentation compl√®te${NC}"
    else
        echo -e "${RED}‚ùå Documentation incompl√®te${NC}"
        return 1
    fi
    
    # V√©rifier la coh√©rence de la documentation
    if grep -q "MONA.*Agence.*Label\|SPARK.*Media Lab" README.md; then
        echo -e "${GREEN}‚úÖ Documentation coh√©rente avec la nouvelle architecture${NC}"
    else
        echo -e "${RED}‚ùå Documentation incoh√©rente avec la nouvelle architecture${NC}"
        return 1
    fi
    
    echo ""
}

# Fonction pour afficher le r√©sum√©
show_summary() {
    echo -e "${PURPLE}üìä R√©sum√© de la v√©rification :${NC}"
    echo ""
    echo -e "${CYAN}‚úÖ Architecture tout-en-un propre${NC}"
    echo -e "${CYAN}‚úÖ Aucune donn√©e factice d√©tect√©e${NC}"
    echo -e "${CYAN}‚úÖ Structure coh√©rente${NC}"
    echo -e "${CYAN}‚úÖ Documentation √† jour${NC}"
    echo ""
    echo -e "${GREEN}üéâ MONA x SPARK est pr√™t pour le d√©veloppement !${NC}"
    echo ""
    echo -e "${YELLOW}üí° Prochaines √©tapes :${NC}"
    echo -e "   1. Copier env.example vers .env"
    echo -e "   2. Configurer les variables d'environnement"
    echo -e "   3. Lancer ./start-tout-en-un.sh"
    echo ""
}

# Fonction principale
main() {
    echo -e "${GREEN}üîç D√©but de la v√©rification...${NC}"
    echo ""
    
    local errors=0
    
    # V√©rifications
    check_structure || ((errors++))
    check_config_files || ((errors++))
    check_fake_data || ((errors++))
    check_unnecessary_files || ((errors++))
    check_url_consistency || ((errors++))
    check_documentation || ((errors++))
    
    echo ""
    
    if [ $errors -eq 0 ]; then
        show_summary
        echo -e "${GREEN}‚úÖ V√©rification termin√©e avec succ√®s !${NC}"
        exit 0
    else
        echo -e "${RED}‚ùå V√©rification termin√©e avec $errors erreur(s)${NC}"
        echo -e "${YELLOW}üîß Corrigez les erreurs avant de continuer${NC}"
        exit 1
    fi
}

# Ex√©cuter la fonction principale
main 