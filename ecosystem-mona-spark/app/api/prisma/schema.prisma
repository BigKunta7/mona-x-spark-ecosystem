// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tables principales
model Users {
  id                String   @id @default(cuid())
  email             String   @unique
  password_hash     String
  first_name        String
  last_name         String
  user_type         UserType
  phone             String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  nda_signed        Boolean  @default(false)
  nda_signed_at     DateTime?
  consent_marketing Boolean  @default(false)
  consent_analytics Boolean  @default(false)
  is_active         Boolean  @default(true)

  // Relations
  artist   Artist?
  expert   Expert?
  sponsor  Sponsor?
  interactions Interaction[]
  opportunities Opportunity[]
  tasks    Task[]
  events   Event[]

  @@map("users")
}

model Artists {
  id              String   @id @default(cuid())
  artist_name     String?
  genre           String?
  followers_count Int      @default(0)
  score_mona      Int      @default(0)
  market_fit_score Int     @default(0)
  level           String   @default("prospect")
  bio             String?
  social_media    Json?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  user           Users           @relation(fields: [id], references: [id])
  interactions   Interaction[]
  opportunities  Opportunity[]
  spark_applications SparkApplication[]
  villa_participants VillaParticipant[]

  @@map("artists")
}

model Experts {
  id                String   @id @default(cuid())
  specialty         String
  years_experience  Int?
  hourly_rate       Decimal? @db.Decimal(10, 2)
  availability      Json?
  rating            Decimal? @db.Decimal(3, 2) @default(0)
  missions_completed Int     @default(0)
  is_verified       Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  user     Users     @relation(fields: [id], references: [id])
  missions Mission[]

  @@map("experts")
}

model Sponsors {
  id            String   @id @default(cuid())
  company_name  String?
  industry      String?
  budget_range  String?
  contact_person String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  user           Users           @relation(fields: [id], references: [id])
  villa_sponsors VillaSponsor[]

  @@map("sponsors")
}

// Tables CRM & Pipeline
model Interactions {
  id           String   @id @default(cuid())
  artist_id    String
  type         InteractionType
  description  String
  outcome      String
  next_action  String
  assigned_to  String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  artist Artists @relation(fields: [artist_id], references: [id])

  @@map("interactions")
}

model Opportunities {
  id             String   @id @default(cuid())
  artist_id      String
  title          String
  value          Decimal  @db.Decimal(10, 2)
  probability    Int
  stage          OpportunityStage
  expected_close DateTime
  description    String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  artist Artists @relation(fields: [artist_id], references: [id])

  @@map("opportunities")
}

// Tables SPARK
model SparkVillas {
  id                  String   @id @default(cuid())
  name                String
  location            String?
  start_date          DateTime
  end_date            DateTime
  genre               String?
  max_participants    Int      @default(10)
  current_participants Int     @default(0)
  status              VillaStatus @default(PLANNING)
  budget_total        Decimal? @db.Decimal(10, 2)
  budget_spent        Decimal? @db.Decimal(10, 2) @default(0)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relations
  applications        SparkApplication[]
  participants        VillaParticipant[]
  sponsors           VillaSponsor[]
  events             Event[]

  @@map("spark_villas")
}

model SparkApplication {
  id              String   @id @default(cuid())
  artist_id       String
  villa_id        String
  motivation_text  String?
  status          ApplicationStatus @default(PENDING)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  artist Artists      @relation(fields: [artist_id], references: [id])
  villa  SparkVillas @relation(fields: [villa_id], references: [id])

  @@map("spark_applications")
}

model VillaParticipant {
  id        String   @id @default(cuid())
  artist_id String
  villa_id  String
  role      String?
  joined_at DateTime @default(now())

  // Relations
  artist Artists      @relation(fields: [artist_id], references: [id])
  villa  SparkVillas @relation(fields: [villa_id], references: [id])

  @@unique([artist_id, villa_id])
  @@map("villa_participants")
}

model VillaSponsor {
  id        String   @id @default(cuid())
  sponsor_id String
  villa_id  String
  amount    Decimal? @db.Decimal(10, 2)
  status    SponsorStatus @default(PENDING)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  sponsor Sponsors    @relation(fields: [sponsor_id], references: [id])
  villa   SparkVillas @relation(fields: [villa_id], references: [id])

  @@map("villa_sponsors")
}

// Tables Automation & Planning
model AutomationSequences {
  id          String   @id @default(cuid())
  name        String
  description String?
  triggers    Json
  actions     Json
  status      AutomationStatus @default(DRAFT)
  last_run    DateTime?
  next_run    DateTime?
  success_rate Float   @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("automation_sequences")
}

model Tasks {
  id             String   @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus @default(TODO)
  priority       Priority @default(MEDIUM)
  assignee_id    String?
  due_date       DateTime?
  estimated_hours Float?
  actual_hours   Float?
  tags           String[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  assignee Users? @relation(fields: [assignee_id], references: [id])

  @@map("tasks")
}

model Events {
  id          String   @id @default(cuid())
  title       String
  description String?
  start_date  DateTime
  end_date    DateTime
  type        EventType
  color       String?
  attendees   String[]
  location    String?
  user_id     String?
  villa_id    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user  Users?       @relation(fields: [user_id], references: [id])
  villa SparkVillas? @relation(fields: [villa_id], references: [id])

  @@map("events")
}

// Tables Marketplace
model MarketplaceBlocks {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  features    String[]
  price       String
  duration    String
  experts_count Int
  success_rate Float
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("marketplace_blocks")
}

model MarketplaceContacts {
  id        String   @id @default(cuid())
  block_id  String
  name      String
  email     String
  phone     String?
  project   String?
  budget    String?
  timeline  String?
  message   String?
  status    ContactStatus @default(PENDING)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  block MarketplaceBlocks @relation(fields: [block_id], references: [id])

  @@map("marketplace_contacts")
}

// Tables Communications
model Communications {
  id          String   @id @default(cuid())
  user_id     String
  type        CommunicationType
  subject     String?
  content     String
  status      CommunicationStatus @default(PENDING)
  sent_at     DateTime?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user Users @relation(fields: [user_id], references: [id])

  @@map("communications")
}

// Tables Scoring & Analytics
model ScoringEvents {
  id          String   @id @default(cuid())
  artist_id   String
  event_type  String
  score_change Int
  details     Json?
  created_at  DateTime @default(now())

  @@map("scoring_events")
}

// Enums
enum UserType {
  ARTIST
  EXPERT
  SPONSOR
  ADMIN
}

enum InteractionType {
  EMAIL
  CALL
  MEETING
  MESSAGE
  PROPOSAL
}

enum OpportunityStage {
  DISCOVERY
  PROPOSAL
  NEGOTIATION
  CLOSED
}

enum VillaStatus {
  PLANNING
  OPEN
  FULL
  IN_PROGRESS
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum SponsorStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum AutomationStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EventType {
  MEETING
  DEADLINE
  REMINDER
  STREAM
  VILLA
}

enum ContactStatus {
  PENDING
  CONTACTED
  RESPONDED
  CLOSED
}

enum CommunicationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum CommunicationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
} 