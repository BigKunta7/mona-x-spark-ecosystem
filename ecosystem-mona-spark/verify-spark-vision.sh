#!/bin/bash

# MONA x SPARK - V√©rification Vision SPARK
# V√©rifie que la vision SPARK est correctement int√©gr√©e

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${PURPLE}üåü V√©rification Vision SPARK MONA x SPARK${NC}"
echo -e "${CYAN}Laboratoire Cr√©atif Itin√©rant${NC}"
echo ""

# Fonction pour v√©rifier la vision SPARK
check_spark_vision() {
    echo -e "${BLUE}üéØ V√©rification vision SPARK...${NC}"
    
    if [ -f "shared/types/spark-vision.ts" ]; then
        echo -e "${GREEN}‚úÖ Vision SPARK pr√©sente${NC}"
        
        # V√©rifier les √©l√©ments cl√©s de la vision
        if grep -q "Nous ne cr√©ons pas des ≈ìuvres" shared/types/spark-vision.ts; then
            echo -e "  ‚úÖ Tagline SPARK"
        else
            echo -e "${RED}  ‚ùå Tagline SPARK manquante${NC}"
            return 1
        fi
        
        if grep -q "SparkEdition" shared/types/spark-vision.ts; then
            echo -e "  ‚úÖ Interface SparkEdition"
        else
            echo -e "${RED}  ‚ùå Interface SparkEdition manquante${NC}"
            return 1
        fi
        
        if grep -q "SparkParticipant" shared/types/spark-vision.ts; then
            echo -e "  ‚úÖ Interface SparkParticipant"
        else
            echo -e "${RED}  ‚ùå Interface SparkParticipant manquante${NC}"
            return 1
        fi
        
        if grep -q "SPARK_CONFIG" shared/types/spark-vision.ts; then
            echo -e "  ‚úÖ Configuration SPARK"
        else
            echo -e "${RED}  ‚ùå Configuration SPARK manquante${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå Vision SPARK manquante${NC}"
        return 1
    fi
    
    echo ""
}

# Fonction pour v√©rifier les utilitaires SPARK
check_spark_utils() {
    echo -e "${BLUE}üîß V√©rification utilitaires SPARK...${NC}"
    
    if [ -f "shared/utils/spark-management.ts" ]; then
        echo -e "${GREEN}‚úÖ Utilitaires SPARK pr√©sents${NC}"
        
        # V√©rifier les fonctions principales
        if grep -q "createSparkEdition" shared/utils/spark-management.ts; then
            echo -e "  ‚úÖ createSparkEdition"
        else
            echo -e "${RED}  ‚ùå createSparkEdition manquante${NC}"
            return 1
        fi
        
        if grep -q "selectParticipants" shared/utils/spark-management.ts; then
            echo -e "  ‚úÖ selectParticipants"
        else
            echo -e "${RED}  ‚ùå selectParticipants manquante${NC}"
            return 1
        fi
        
        if grep -q "calculateSparkMetrics" shared/utils/spark-management.ts; then
            echo -e "  ‚úÖ calculateSparkMetrics"
        else
            echo -e "${RED}  ‚ùå calculateSparkMetrics manquante${NC}"
            return 1
        fi
        
        if grep -q "validateEditionSetup" shared/utils/spark-management.ts; then
            echo -e "  ‚úÖ validateEditionSetup"
        else
            echo -e "${RED}  ‚ùå validateEditionSetup manquante${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå Utilitaires SPARK manquants${NC}"
        return 1
    fi
    
    echo ""
}

# Fonction pour v√©rifier les exports
check_spark_exports() {
    echo -e "${BLUE}üì¶ V√©rification exports SPARK...${NC}"
    
    # V√©rifier exports types
    if [ -f "shared/types/index.ts" ] && grep -q "spark-vision" shared/types/index.ts; then
        echo -e "${GREEN}‚úÖ Export types SPARK configur√©${NC}"
    else
        echo -e "${RED}‚ùå Export types SPARK manquant${NC}"
        return 1
    fi
    
    # V√©rifier exports utils
    if [ -f "shared/utils/index.ts" ] && grep -q "spark-management" shared/utils/index.ts; then
        echo -e "${GREEN}‚úÖ Export utils SPARK configur√©${NC}"
    else
        echo -e "${RED}‚ùå Export utils SPARK manquant${NC}"
        return 1
    fi
    
    echo ""
}

# Fonction pour v√©rifier les sp√©cificit√©s SPARK
check_spark_specificities() {
    echo -e "${BLUE}üé® V√©rification sp√©cificit√©s SPARK...${NC}"
    
    # V√©rifier les r√¥les SPARK
    if grep -q "musician\|beatmaker\|dancer\|videographer" shared/types/spark-vision.ts; then
        echo -e "${GREEN}‚úÖ R√¥les SPARK d√©finis${NC}"
    else
        echo -e "${RED}‚ùå R√¥les SPARK manquants${NC}"
        return 1
    fi
    
    # V√©rifier les tiers sponsors
    if grep -q "RAW\|CORE\|LEGACY" shared/types/spark-vision.ts; then
        echo -e "${GREEN}‚úÖ Tiers sponsors d√©finis${NC}"
    else
        echo -e "${RED}‚ùå Tiers sponsors manquants${NC}"
        return 1
    fi
    
    # V√©rifier la configuration
    if grep -q "editionDuration.*7" shared/types/spark-vision.ts; then
        echo -e "${GREEN}‚úÖ Dur√©e √©dition configur√©e${NC}"
    else
        echo -e "${RED}‚ùå Dur√©e √©dition manquante${NC}"
        return 1
    fi
    
    # V√©rifier les m√©triques
    if grep -q "SparkMetrics" shared/types/spark-vision.ts; then
        echo -e "${GREEN}‚úÖ M√©triques SPARK d√©finies${NC}"
    else
        echo -e "${RED}‚ùå M√©triques SPARK manquantes${NC}"
        return 1
    fi
    
    echo ""
}

# Fonction pour v√©rifier l'int√©gration MONA-SPARK
check_mona_spark_integration() {
    echo -e "${BLUE}üîó V√©rification int√©gration MONA-SPARK...${NC}"
    
    # V√©rifier que les types SPARK sont coh√©rents avec MONA
    if grep -q "ArtistScore\|MonaOffer" shared/types/mona-business-model.ts; then
        echo -e "${GREEN}‚úÖ Types MONA pr√©sents${NC}"
    else
        echo -e "${RED}‚ùå Types MONA manquants${NC}"
        return 1
    fi
    
    # V√©rifier que les types SPARK sont pr√©sents
    if grep -q "SparkEdition\|SparkParticipant" shared/types/spark-vision.ts; then
        echo -e "${GREEN}‚úÖ Types SPARK pr√©sents${NC}"
    else
        echo -e "${RED}‚ùå Types SPARK manquants${NC}"
        return 1
    fi
    
    # V√©rifier la coh√©rence des exports
    if grep -q "mona-business-model\|spark-vision" shared/types/index.ts; then
        echo -e "${GREEN}‚úÖ Exports coh√©rents${NC}"
    else
        echo -e "${RED}‚ùå Exports incoh√©rents${NC}"
        return 1
    fi
    
    echo ""
}

# Fonction pour afficher le r√©sum√©
show_summary() {
    echo -e "${PURPLE}üìä R√©sum√© de la vision SPARK :${NC}"
    echo ""
    echo -e "${CYAN}‚úÖ Vision SPARK int√©gr√©e${NC}"
    echo -e "${CYAN}‚úÖ Laboratoire cr√©atif itin√©rant${NC}"
    echo -e "${CYAN}‚úÖ Mod√®le √©conomique diversifi√©${NC}"
    echo -e "${CYAN}‚úÖ Gestion des participants et sponsors${NC}"
    echo -e "${CYAN}‚úÖ M√©triques et KPIs d√©finis${NC}"
    echo ""
    echo -e "${GREEN}üéâ MONA x SPARK est pr√™t avec la vision SPARK !${NC}"
    echo ""
    echo -e "${YELLOW}üí° Caract√©ristiques SPARK :${NC}"
    echo -e "   ‚Ä¢ R√©sidences cr√©atives nomades"
    echo -e "   ‚Ä¢ 10-15 artistes pluridisciplinaires"
    echo -e "   ‚Ä¢ 7 jours d'immersion cr√©ative"
    echo -e "   ‚Ä¢ Diffusion live et contenus"
    echo -e "   ‚Ä¢ Mod√®le √©conomique diversifi√©"
    echo ""
    echo -e "${YELLOW}üéØ Diff√©renciation MONA vs SPARK :${NC}"
    echo -e "   ‚Ä¢ MONA : Agence & Label (individuel)"
    echo -e "   ‚Ä¢ SPARK : Media Lab & Studio Cr√©atif (collectif)"
    echo ""
}

# Fonction principale
main() {
    echo -e "${GREEN}üîç D√©but de la v√©rification SPARK...${NC}"
    echo ""
    
    local errors=0
    
    # V√©rifications
    check_spark_vision || ((errors++))
    check_spark_utils || ((errors++))
    check_spark_exports || ((errors++))
    check_spark_specificities || ((errors++))
    check_mona_spark_integration || ((errors++))
    
    echo ""
    
    if [ $errors -eq 0 ]; then
        show_summary
        echo -e "${GREEN}‚úÖ V√©rification SPARK termin√©e avec succ√®s !${NC}"
        exit 0
    else
        echo -e "${RED}‚ùå V√©rification SPARK termin√©e avec $errors erreur(s)${NC}"
        echo -e "${YELLOW}üîß Corrigez les erreurs avant de continuer${NC}"
        exit 1
    fi
}

# Ex√©cuter la fonction principale
main 