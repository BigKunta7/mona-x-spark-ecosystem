name: CI/CD Pipeline - MONA x SPARK V2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # ========================================
  # TESTS & QUALIT√â
  # ========================================
  test:
    name: Tests & Qualit√©
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mona_spark_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd app/api && npm ci
          cd ../client && npm ci

      - name: Setup test database
        run: |
          cd app/api
          npx prisma migrate deploy --schema=./prisma/schema.prisma
          npx prisma generate

      - name: Run linting
        run: |
          npm run lint
          cd app/api && npm run lint
          cd ../client && npm run lint

      - name: Run type checking
        run: |
          npm run type-check
          cd app/api && npm run type-check
          cd ../client && npm run type-check

      - name: Run tests
        run: |
          cd app/api && npm test
          cd ../client && npm test

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ========================================
  # BUILD & DOCKER
  # ========================================
  build:
    name: Build & Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./app/api
          push: true
          tags: |
            mona-spark/api:latest
            mona-spark/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Client image
        uses: docker/build-push-action@v5
        with:
          context: ./app/client
          push: true
          tags: |
            mona-spark/client:latest
            mona-spark/client:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================================
  # D√âPLOIEMENT STAGING
  # ========================================
  deploy-staging:
    name: D√©ploiement Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ D√©ploiement staging..."
          # Ici vous pouvez ajouter votre logique de d√©ploiement
          # Par exemple : docker-compose -f docker-compose.staging.yml up -d

      - name: Run smoke tests
        run: |
          echo "üß™ Tests de fum√©e..."
          # Tests basiques pour v√©rifier que l'application fonctionne

      - name: Notify team
        run: |
          echo "üì¢ Notification √©quipe - Staging d√©ploy√©"

  # ========================================
  # D√âPLOIEMENT PRODUCTION
  # ========================================
  deploy-production:
    name: D√©ploiement Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ D√©ploiement production..."
          # Logique de d√©ploiement production

      - name: Run health checks
        run: |
          echo "üè• V√©rifications de sant√©..."
          # V√©rifications que l'application fonctionne

      - name: Notify success
        run: |
          echo "‚úÖ D√©ploiement production r√©ussi"

  # ========================================
  # MONITORING & ALERTES
  # ========================================
  monitoring:
    name: Monitoring & Alertes
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Check application health
        run: |
          echo "üîç V√©rification sant√© application..."
          # Scripts de monitoring

      - name: Send notifications
        run: |
          echo "üì¢ Envoi notifications..."
          # Notifications Slack/Discord/Email

  # ========================================
  # DOCUMENTATION
  # ========================================
  documentation:
    name: G√©n√©ration Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate API documentation
        run: |
          cd app/api
          npm run docs:generate

      - name: Deploy documentation
        run: |
          echo "üìö D√©ploiement documentation..."
          # D√©ploiement sur GitHub Pages ou autre

  # ========================================
  # S√âCURIT√â
  # ========================================
  security:
    name: Audit S√©curit√©
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          echo "üîí Scan de s√©curit√©..."
          # Outils de s√©curit√© (Snyk, etc.)

      - name: Check dependencies
        run: |
          npm audit
          cd app/api && npm audit
          cd ../client && npm audit

      - name: Run SAST
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ========================================
  # PERFORMANCE
  # ========================================
  performance:
    name: Tests Performance
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        run: |
          echo "‚ö° Tests Lighthouse..."
          # Tests de performance

      - name: Run load tests
        run: |
          echo "üìä Tests de charge..."
          # Tests de charge avec Artillery ou similaire

  # ========================================
  # BACKUP & R√âTENTION
  # ========================================
  backup:
    name: Backup & R√©tention
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Create database backup
        run: |
          echo "üíæ Cr√©ation backup base de donn√©es..."
          # Script de backup

      - name: Clean old backups
        run: |
          echo "üßπ Nettoyage anciens backups..."
          # Nettoyage automatique

      - name: Upload to storage
        run: |
          echo "‚òÅÔ∏è Upload vers stockage cloud..."
          # Upload vers S3 ou autre 