#!/bin/bash

# Script de lancement complet pour MONA x SPARK
echo "üöÄ Lancement de l'√©cosyst√®me MONA x SPARK..."

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les statuts
show_status() {
    echo -e "\n${BLUE}üìä Statut des services :${NC}"
    docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
}

# Fonction pour tester un service
test_service() {
    local service_name=$1
    local port=$2
    local url=$3
    
    echo -e "\n${YELLOW}üîç Test du service $service_name sur le port $port...${NC}"
    
    if curl -s --connect-timeout 5 "$url" > /dev/null; then
        echo -e "${GREEN}‚úÖ $service_name est accessible sur $url${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $service_name n'est pas accessible sur $url${NC}"
        return 1
    fi
}

# V√©rifier que Docker est en cours d'ex√©cution
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker n'est pas en cours d'ex√©cution${NC}"
    echo "Veuillez d√©marrer Docker Desktop et r√©essayer"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker est en cours d'ex√©cution${NC}"

# D√©marrer les services de base
echo -e "\n${BLUE}üóÑÔ∏è  D√©marrage des services de base...${NC}"
docker-compose up -d postgres redis

# Attendre que les services de base soient pr√™ts
echo -e "${YELLOW}‚è≥ Attente que les services de base soient pr√™ts...${NC}"
sleep 10

# D√©marrer l'API
echo -e "\n${BLUE}üîß D√©marrage de l'API...${NC}"
docker-compose up -d api

# Attendre que l'API soit pr√™te
echo -e "${YELLOW}‚è≥ Attente que l'API soit pr√™te...${NC}"
sleep 15

# D√©marrer le client
echo -e "\n${BLUE}üé® D√©marrage du client...${NC}"
docker-compose up -d client

# Attendre que le client soit pr√™t
echo -e "${YELLOW}‚è≥ Attente que le client soit pr√™t...${NC}"
sleep 20

# D√©marrer les microservices
echo -e "\n${BLUE}‚öôÔ∏è  D√©marrage des microservices...${NC}"
docker-compose up -d analytics notifications streaming-bridge

# Attendre que les microservices soient pr√™ts
echo -e "${YELLOW}‚è≥ Attente que les microservices soient pr√™ts...${NC}"
sleep 15

# Afficher le statut final
show_status

# Tester tous les services
echo -e "\n${BLUE}üß™ Tests de connectivit√©...${NC}"

test_service "API" "3001" "http://localhost:3001/health"
test_service "Client" "3000" "http://localhost:3000"
test_service "Analytics" "3002" "http://localhost:3002/health"
test_service "Notifications" "3004" "http://localhost:3004/health"
test_service "Streaming Bridge" "3005" "http://localhost:3005/health"

# Afficher les URLs d'acc√®s
echo -e "\n${GREEN}üéâ √âcosyst√®me MONA x SPARK lanc√© !${NC}"
echo -e "\n${BLUE}üì± URLs d'acc√®s :${NC}"
echo -e "${GREEN}‚Ä¢ Client Next.js :${NC} http://localhost:3000"
echo -e "${GREEN}‚Ä¢ API Backend :${NC} http://localhost:3001"
echo -e "${GREEN}‚Ä¢ Health API :${NC} http://localhost:3001/health"
echo -e "${GREEN}‚Ä¢ Status API :${NC} http://localhost:3001/status"
echo -e "${GREEN}‚Ä¢ Analytics :${NC} http://localhost:3002"
echo -e "${GREEN}‚Ä¢ Notifications :${NC} http://localhost:3004"
echo -e "${GREEN}‚Ä¢ Streaming Bridge :${NC} http://localhost:3005"

echo -e "\n${YELLOW}üí° Commandes utiles :${NC}"
echo -e "‚Ä¢ Voir les logs : docker-compose logs -f [service]"
echo -e "‚Ä¢ Red√©marrer un service : docker-compose restart [service]"
echo -e "‚Ä¢ Arr√™ter tout : docker-compose down"
echo -e "‚Ä¢ Voir le statut : docker-compose ps"

echo -e "\n${BLUE}üîó Base de donn√©es :${NC}"
echo -e "‚Ä¢ PostgreSQL : localhost:5432"
echo -e "‚Ä¢ Redis : localhost:6379" 